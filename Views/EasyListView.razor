@using RadzenHelper
@using System.Reflection

@typeparam TItem where TItem : UpdatableBase

<RadzenDataGrid @ref="Items.ItemGrid" AllowFiltering="true" AllowPaging="true" PageSize="20" AllowSorting="true" EditMode="DataGridEditMode.Multiple"
                Data="@Items.Items" RowUpdate="@Items.OnUpdateRow" RowCreate="@Items.OnCreateRow" TItem="TItem">
    <Columns>
        @if (!UseCustomColumns || true)
        {
            foreach ((PropertyInfo info, ColumnDefinitionAttribute attribute) in Items.GetColumns())
            {
                <RadzenDataGridColumn Title="@(attribute.DisplayName)" TItem="TItem" Filterable=false Reorderable=false>
                    <Template Context="item">
                        @{
                            SetItem(item, info);
                        }
                        @values[item].Value
                    </Template>
                    <EditTemplate Context="item">
                        @{
                            SetItem(item, info);
                        }

                        <RadzenTextBox @bind-Value="values[item].Value" Style="width:100%; display: block" Name="@info.Name" />

                        @if (attribute.IsRequired)
                        {
                            <RadzenRequiredValidator Text="Required!" Component="@info.Name" Popup="true" />
                        }
                    </EditTemplate>
                </RadzenDataGridColumn>
                @*<EasyColumn PropertyInfo="info" Attribute="attribute" TableMode="TableDisplayMode" />*@
            }
        }

        @if (ChildContent != null)
        {
            @ChildContent
        }

        @if (AllowEdit)
        {
            <RadzenDataGridColumn TItem="TItem" Context="sampleBlazorModelsSampleTItem" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="10%">
                <Template Context="item">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@(args => Items.EditRow(item))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="item">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Primary" Class="m-1" Click="@((args) => Items.SaveRow(item))">
                    </RadzenButton>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@((args) => Items.CancelEdit(item))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>
        }



        @if (AllowDelete || SpecialActions.Any())
        {
            <RadzenDataGridColumn TItem="TItem" Context="item" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="10%">
                <Template Context="item">
                    @if (AllowDelete)
                    {
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Class="m-1" Click="@(args => Items.DeleteRow(item))" @onclick:stopPropagation="true" />
                    }

                    @foreach (var action in SpecialActions)
                    {
                        <RadzenButton ButtonStyle="action.Style" Icon="@(action.Icon)" Class="m-1" Click="@(args => action.OnClick(item))" />
                    }
                </Template>
                <EditTemplate Context="item">
                    @if (AllowDelete)
                    {
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Class="m-1" Click="@(args => Items.DeleteRow(item))" />
                    }

                    @foreach (var action in SpecialActions)
                    {
                        <RadzenButton ButtonStyle="action.Style" Icon="@(action.Icon)" Class="m-1" Click="@(args => action.OnClick(item))" />
                    }
                </EditTemplate>
            </RadzenDataGridColumn>
        }
    </Columns>
</RadzenDataGrid>

@code
{
    [Parameter]
    public RenderFragment? ChildContent { get; set; } = null;

    [Parameter]
    public bool AllowEdit { get; set; } = true;

    [Parameter]
    public bool AllowDelete { get; set; } = true;

    [Parameter]
    public bool UseCustomColumns { get; set; } = false;

    [Parameter]
    public DisplayMode TableDisplayMode { get; set; } = DisplayMode.Always;

    [Parameter]
    public IEnumerable<SpecialRowAction<TItem>> SpecialActions { get; set; } = new List<SpecialRowAction<TItem>>();


    [Parameter]
    [EditorRequired]
    public ListViewItemsBase<TItem> Items { get; set; }


    Dictionary<TItem, ValueDummy> values = new Dictionary<TItem, ValueDummy>();

    void SetItem(TItem item, PropertyInfo info)
    {
        values[item] = new ValueDummy(item, info);
    }

    class ValueDummy
    {
        private readonly TItem item;
        private readonly PropertyInfo info;

        public ValueDummy(TItem item, PropertyInfo info)
        {
            this.item = item;
            this.info = info;
        }

        public string Value
        {
            get
            {
                return info.GetValue(item)?.ToString() ?? "";
            }
            set
            {
                info.SetValue(item, value);

            }
        }
    }
}
