@using RadzenHelper
@using System.Reflection

@typeparam TItem where TItem : UpdatableBase

<h3>EasyListView</h3>

<RadzenDataGrid @ref="Items.ItemGrid" AllowFiltering="true" AllowPaging="true" PageSize="20" AllowSorting="true" EditMode="DataGridEditMode.Multiple"
                Data="@Items.Items" RowUpdate="@Items.OnUpdateRow" RowCreate="@Items.OnCreateRow" TItem="TItem">
    <Columns>
        @if (!UseCustomColumns)
        {
            foreach ((PropertyInfo info, ColumnDefinitionAttribute attribute) in Items.GetColumns())
            {
                <EasyColumn PropertyInfo="info" Attribute="attribute" TableMode="TableDisplayMode" />
            }
        }

        @if (ChildContent != null)
        {
            @ChildContent
        }

        @if (AllowEdit)
        {
            <RadzenDataGridColumn TItem="TItem" Context="sampleBlazorModelsSampleTItem" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="10%">
                <Template Context="item">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@(args => Items.EditRow(item))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="item">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Primary" Class="m-1" Click="@((args) => Items.SaveRow(item))">
                    </RadzenButton>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@((args) => Items.CancelEdit(item))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>
        }



        @if (AllowDelete || SpecialActions.Any())
        {
            <RadzenDataGridColumn TItem="TItem" Context="item" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                <Template Context="item">
                    @if (AllowDelete)
                    {
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Class="m-1" Click="@(args => Items.DeleteRow(item))" @onclick:stopPropagation="true" />
                    }

                    @foreach(var action in SpecialActions)
                    {
                        <RadzenButton ButtonStyle="action.Style" Icon="@(action.Icon)" Class="m-1" Click="@(args => action.OnClick(item))"/>
                    }
                </Template>
                <EditTemplate Context="item">
                    @if (AllowDelete)
                    {
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Class="m-1" Click="@(args => Items.DeleteRow(item))" />
                    }

                    @foreach(var action in SpecialActions)
                    {
                        <RadzenButton ButtonStyle="action.Style" Icon="@(action.Icon)" Class="m-1" Click="@(args => action.OnClick(item))"/>
                    }
                </EditTemplate>
            </RadzenDataGridColumn>
        }
    </Columns>
</RadzenDataGrid>

@code
{
    [Parameter]
    public RenderFragment? ChildContent { get; set; } = null;

    [Parameter]
    public bool AllowEdit { get; set; } = true;

    [Parameter]
    public bool AllowDelete { get; set; } = true;

    [Parameter]
    public bool UseCustomColumns { get; set; } = false;

    [Parameter]
    public DisplayMode TableDisplayMode { get; set; } = DisplayMode.Always;

    [Parameter]
    public IEnumerable<SpecialRowAction<TItem>> SpecialActions { get; set; } = new List<SpecialRowAction<TItem>>();


    [Parameter]
    public ListViewItemsBase<TItem> Items { get; set; }


    public EasyListView(ListViewItemsBase<TItem> items)
    {
        Items = items;
    }
}
