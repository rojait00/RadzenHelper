@using RadzenHelper
@using System.Reflection
@using RadzenHelper.DisplayHelper;

@inject HttpClient http
@inject NotificationService notificationService
@inject NavigationManager navigationManager
@inject DialogService dialogService

@typeparam TItem where TItem : UpdatableBase

@if (AllowAddNewItem)
{
    <br />
    <RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="@("Add New " + Items.GetDisplayName())" Click="@Items.InsertRow" Disabled=@(Items.ItemToInsert != null) />
}

<RadzenDataGrid @ref="Items.ItemGrid" AllowFiltering="false" AllowPaging="true" PageSize="20" AllowSorting="false" EditMode="DataGridEditMode.Multiple"
                Data="@Items.Items" RowUpdate="@Items.OnUpdateRow" RowCreate="@Items.OnCreateRow" TItem="TItem">
    <Columns>
        @if (!UseCustomColumns)
        {
            foreach ((PropertyInfo info, ColumnDefinitionAttribute attribute) in Items.GetColumns())
            {
                <RadzenDataGridColumn Title="@(attribute.DisplayName)" TItem="TItem" Filterable=false Reorderable=false>
                    <Template Context="item">
                        @{
                            SetItem(item, info);
                        }
                        @(values[(item, info)].GetValueAsString())
                    </Template>
                    <EditTemplate Context="item">
                        @{
                            SetItem(item, info);
                        }

                        @if (attribute.IsReadOnly || item.IsReadOnly)
                        {
                            @(values[(item, info)].Value?.ToString() ?? "")
                        }
                        else
                        {
                            <EditorFor @bind-value="values[(item,info)].Value" Style="width:100%; display: block" Name="@info.Name"  AllowMultipleValues="@(attribute.AllowMultipleValues)"/>
                        }

                        @if (attribute.IsRequired)
                        {
                            <RadzenRequiredValidator Text="Required!" Component="@info.Name" Popup="true" />
                        }
                    </EditTemplate>
                </RadzenDataGridColumn>
            }
        }

        @if (ChildContent != null)
        {
            @ChildContent
        }

        @if (AllowEdit)
        {
            <RadzenDataGridColumn TItem="TItem" Context="sampleBlazorModelsSampleTItem" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="10%">
                <Template Context="item">
                    @if (!item.IsReadOnly)
                    {
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@(args => Items.EditRow(item))" @onclick:stopPropagation="true">
                        </RadzenButton>
                    }
                </Template>
                <EditTemplate Context="item">
                    @if (!item.IsReadOnly)
                    {
                        <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Primary" Class="m-1" Click="@((args) => Items.SaveRow(item))">
                        </RadzenButton>
                        <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@((args) => Items.CancelEdit(item))">
                        </RadzenButton>
                    }
                </EditTemplate>
            </RadzenDataGridColumn>
        }

        @if (SpecialActions.Any())
        {
            <RadzenDataGridColumn TItem="TItem" Context="item" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="@((SpecialActions.Count() * 7) + "%")">
                <Template Context="item">
                    @foreach (var action in SpecialActions)
                    {
                        <RadzenButton ButtonStyle="action.Style" Icon="@(action.Icon)" Class="m-1" Click="@(async args => await action.OnClick(item, GetServiceContainer()))" />
                    }
                </Template>
                <EditTemplate Context="item">
                    @foreach (var action in SpecialActions)
                    {
                        <RadzenButton ButtonStyle="action.Style" Icon="@(action.Icon)" Class="m-1" Click="@(async args => await action.OnClick(item, GetServiceContainer()))" />
                    }
                </EditTemplate>
            </RadzenDataGridColumn>
        }


        @if (AllowDelete)
        {
            <RadzenDataGridColumn TItem="TItem" Context="item" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="7%">
                <Template Context="item">
                    @if (AllowDelete)
                    {
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Class="m-1" Click="@(args => Items.DeleteRow(item))" @onclick:stopPropagation="true" />
                    }
                </Template>
                <EditTemplate Context="item">
                    @if (AllowDelete)
                    {
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Class="m-1" Click="@(args => Items.DeleteRow(item))" />
                    }
                </EditTemplate>
            </RadzenDataGridColumn>
        }
    </Columns>
</RadzenDataGrid>

@code
{
    [Parameter]
    public RenderFragment? ChildContent { get; set; } = null;

    [Parameter]
    public bool AllowEdit { get; set; } = true;

    [Parameter]
    public bool AllowAddNewItem { get; set; } = true;

    [Parameter]
    public bool AllowDelete { get; set; } = true;

    [Parameter]
    public bool UseCustomColumns { get; set; } = false;

    [Parameter]
    public DisplayMode TableDisplayMode { get; set; } = DisplayMode.Always;

    [Parameter]
    public IEnumerable<SpecialRowAction<TItem>> SpecialActions { get; set; } = new List<SpecialRowAction<TItem>>();


    [Parameter]
    [EditorRequired]
    public ListViewItemsBase<TItem> Items { get; set; } = null!;


    Dictionary<(TItem, PropertyInfo), ValueDummy> values = new();

    public ServiceContainer GetServiceContainer()
    {
        return new ServiceContainer
            {
                NavigationManager = navigationManager,
                Http = http,
                NotificationService = notificationService,
                DialogService = dialogService
            };
    }

    void SetItem(TItem item, PropertyInfo info)
    {
        values[(item, info)] = new ValueDummy(item, info);
    }

    class ValueDummy
    {
        private readonly TItem item;
        private readonly PropertyInfo info;

        public ValueDummy(TItem item, PropertyInfo info)
        {
            this.item = item;
            this.info = info;
        }

        public object? Value
        {
            get
            {
                return info.GetValue(item);
            }
            set
            {
                if (info.CanWrite)
                {
                    info.SetValue(item, value);
                }
            }
        }

        public string GetValueAsString()
        {
            var hasName = Value as IHasName;
            if (hasName != null)
            {
                return hasName.Name ?? "N/A";
            }

            return Value?.ToString() ?? "N/A";
        }
    }
}
